location /medicamentos {

	default_type application/json;
	proxy_http_version 1.1;
	proxy_set_header Connection "";
	client_body_buffer_size 16m;
	client_max_body_size 16m;

	location /medicamentos/registro {
		content_by_lua_file "lua/medicamentos/registro.lua";
	}

	location /medicamentos/consulta {
		content_by_lua_file "lua/medicamentos/consulta.lua";
	}

	location /medicamentos/formato {
		content_by_lua_file "lua/medicamentos/formato.lua";
	}

	location /medicamentos/proceso {
		content_by_lua_file "lua/medicamentos/proceso.lua";
	}

	location /medicamentos/chkdMed {
		content_by_lua_file "lua/medicamentos/chkdMed.lua";
	}

	location /medicamentos/chkdMed2 {
		content_by_lua_file "lua/medicamentos/chkdMed2.lua";
	}

	location /medicamentos-doc {
		proxy_buffering off;
		proxy_request_buffering off;
		proxy_pass http://medicamentosJARupstream/medicamentos-doc;
	}

}

location /crearUsuarioHTPASS/ {
	proxy_pass http://10.15.109.33/medicamentos-doc/usuario/alta/;
}

location /med/int {

	default_type application/json;
	proxy_http_version 1.1;
	proxy_set_header Connection "";
	client_body_buffer_size 16m;
	client_max_body_size 16m;

	access_by_lua_block {
		if ngx.var.request_method == "OPTIONS" then
			ngx.exit(200)
		end
		local ck = require "resty.cookie"
		local cookie, err = ck:new()

		if ngx.var.http_authorization or cookie then
			local jwt = require "resty.jwt"
			local jwt_token = ngx.var.http_authorization or cookie:get("token")
			ngx.log(ngx.WARN,(require "inspect").inspect(jwt_token))
			local jwt_obj = jwt:verify("#M3x1c02019_", jwt_token, {
				lifetime_grace_period = 120,
				require_exp_claim = true
			})
			if jwt_obj.verified and jwt_obj.payload and jwt_obj.payload._id then
				--ngx.log(ngx.DEBUG,(require "inspect").inspect(jwt_obj))
				ngx.req.set_header('userid',jwt_obj.payload._id)
				ngx.req.set_header('institucionid',jwt_obj.payload.dep)
			else
				ngx.status = ngx.HTTP_UNAUTHORIZED
				ngx.log(ngx.DEBUG,jwt_obj.reason)
				ngx.exit(ngx.HTTP_OK)
			end
		else
			ngx.status = ngx.HTTP_UNAUTHORIZED
			ngx.exit(ngx.HTTP_OK)
		end
	}

	location /med/int/registro {
		content_by_lua_file "lua/medicamentos/registro.lua";
	}

	location /med/int/consulta {
		content_by_lua_file "lua/medicamentos/consulta.lua";
	}

	location /med/int/formato {
		content_by_lua_file "lua/medicamentos/formato.lua";
	}

	location /med/int/proceso {
		content_by_lua_file "lua/medicamentos/proceso.lua";
	}

}

location /med/bpm {

	default_type application/json;
	proxy_http_version 1.1;
	proxy_set_header Connection "";
	client_body_buffer_size 16m;
	client_max_body_size 16m;

	access_by_lua_block {
		--ngx.log(ngx.DEBUG,ngx.var.cookie_JSESSIONID)
		if ngx.var.cookie_jwtbpms then
			local jwt = require "resty.jwt"
			local jwt_token = ngx.var.cookie_jwtbpms
			local jwt_obj = jwt:verify("#BPMS2020_", jwt_token, {
				lifetime_grace_period = 120,
				require_exp_claim = true
			})
			if jwt_obj.verified and jwt_obj.payload and jwt_obj.payload.id then
				ngx.req.set_header('userid',jwt_obj.payload.id)
				ngx.exit(0)
			else
				ngx.log(ngx.DEBUG,jwt_obj.reason)
			end
		end
		if ngx.var.cookie_JSESSIONID then
			local http = require "resty.http"
			local httpc = http.new()
			httpc:set_timeout(50000)
			local okCon, errCon = httpc:connect("127.0.0.1", 80)
			local res, errReq = httpc:request({
						path = "/camunda/api/admin/auth/user/default/",
						--path = "/bpms/api/admin/auth/user/default/",
						method = "GET",
						headers = {
							["Accept"] = "application/json",
							["Cookie"] = "JSESSIONID="..ngx.var.cookie_JSESSIONID,
							["True-Client-IP"] = ngx.var.http_true_client_ip,
						}
					})
			httpc:set_keepalive()
			--ngx.log(ngx.DEBUG,(require "inspect")(res))
			if res and res.status == 200 then
				local body = cjson.decode(res:read_body())
				--ngx.log(ngx.DEBUG,(require "inspect")(body))
				--ngx.log(ngx.DEBUG,body.userId)
				ngx.req.set_header('userid',body.userId)
				local jwt = require "resty.jwt"
				local jwt_token = jwt:sign("#BPMS2020_",
					{
						header={typ="JWT", alg="HS256"},
						payload={exp=ngx.time()+(120*60),id=body.userId}
					}
				)
				if jwt_token then
					ngx.header['Set-Cookie'] = 'jwtbpms='..jwt_token..'; path=/camunda; secure; HttpOnly'
				end
			else
				ngx.status = ngx.HTTP_UNAUTHORIZED
				ngx.exit(ngx.HTTP_OK)
			end
		else
			ngx.status = ngx.HTTP_UNAUTHORIZED
			ngx.exit(ngx.HTTP_OK)
		end
	}

	location /med/bpm/registro {
		content_by_lua_file "lua/medicamentos/registro.lua";
	}

	location /med/bpm/consulta {
		content_by_lua_file "lua/medicamentos/consulta.lua";
	}

	location /med/bpm/formato {
		content_by_lua_file "lua/medicamentos/formato.lua";
	}

	location /med/bpm/proceso {
		content_by_lua_file "lua/medicamentos/proceso.lua";
	}
}

location /covid-19 {
	access_by_lua_block {
		local t = require "medicamentos.tarpitGus"
		t.tarpit(
			20, -- request limit
			5*60, -- window time
			100 -- delay time
		)
		if ngx.var.http_token then
			local jwt = require "resty.jwt"
			local jwt_token = ngx.var.http_token
			local jwt_obj = jwt:verify("#C0v1D_19!", jwt_token, {
				lifetime_grace_period = 120,
				require_exp_claim = true
			})
			if jwt_obj.verified and jwt_obj.payload and jwt_obj.payload.sub then
				--ngx.log(ngx.DEBUG,(require "inspect").inspect(jwt_obj))
				if jwt_obj.payload.ip ~= (ngx.var.http_true_client_ip or "") then
					local he = require "he.historialEventos"
					he.registrarEvento (4013, "IP Changed", "", ngx.var.uri or "", 401, "ACCESS", "", "", ngx.var.http_true_client_ip or "", 200, ngx.var.request_time, cjson.encode(jwt_obj).."\n\n"..cjson.encode(ngx.req.get_headers(0,true)))
				end
				ngx.req.set_header('userid',jwt_obj.payload.sub)
			else
				ngx.status = ngx.HTTP_UNAUTHORIZED
				--ngx.log(ngx.DEBUG,jwt_obj.reason)
				local he = require "he.historialEventos"
				he.registrarEvento (4011, "Access unauthorized", "", ngx.var.uri or "", 401, "ACCESS", "", "", ngx.var.http_true_client_ip or "", ngx.status, ngx.var.request_time, cjson.encode(jwt_obj).."\n\n"..cjson.encode(ngx.req.get_headers(0,true)))
				ngx.exit(ngx.HTTP_OK)
			end
		else
			ngx.status = ngx.HTTP_UNAUTHORIZED
			local he = require "he.historialEventos"
			he.registrarEvento (4012, "Token not provided", "", ngx.var.uri or "", 401, "ACCESS", "", "", ngx.var.http_true_client_ip or "", ngx.status, ngx.var.request_time, cjson.encode(ngx.req.get_headers(0,true)))
			ngx.exit(ngx.HTTP_OK)
		end
	}
	content_by_lua_file "lua/medicamentos/proceso.lua";
}

location /covid-19/start {
	access_by_lua_block {
		local t = require "medicamentos.tarpitGus"
		t.tarpit(
			20, -- request limit
			5*60, -- window time
			100 -- delay time
		)
	}
	content_by_lua_file "lua/medicamentos/proceso.lua";
}

location /iidInfo/ {
	proxy_pass https://iid.googleapis.com/iid/info/;
}

location /mailshot/api/v1/mensajes {
	proxy_pass http://10.15.109.44;
}
